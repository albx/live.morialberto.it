schema {
  query: Query
}

enum OrderBy {
  ASC
  DESC
}

input DefaultValue {
  Byte: Byte
  Short: Short
  Int: Int
  Long: Long
  String: String
  Boolean: Boolean
  Single: Single
  Float: Float
  Decimal: Decimal
  DateTime: DateTime
  ByteArray: ByteArray
  LocalTime: LocalTime
}

type Streaming {
  Id: UUID!
  UserId: String!
  Title: String!
  Slug: String!
  Abstract: String
  Seo_Title: String
  Seo_Description: String
  Seo_Keywords: String
  PublicationDate: DateTime
  Status: String!
  CreationDate: DateTime!
  TwitchChannel: String!
  ScheduleDate: DateTime!
  StartingTime: LocalTime!
  EndingTime: LocalTime!
  HostingChannelUrl: String!
  YouTubeVideoUrl: String
}

type DbOperationResult {
  "Contains result for mutation execution"
  result: String
}

"Order by input for Streaming GraphQL type"
input StreamingOrderByInput {
  "Order by options for Id"
  Id: OrderBy
  "Order by options for UserId"
  UserId: OrderBy
  "Order by options for Title"
  Title: OrderBy
  "Order by options for Slug"
  Slug: OrderBy
  "Order by options for Abstract"
  Abstract: OrderBy
  "Order by options for Seo_Title"
  Seo_Title: OrderBy
  "Order by options for Seo_Description"
  Seo_Description: OrderBy
  "Order by options for Seo_Keywords"
  Seo_Keywords: OrderBy
  "Order by options for PublicationDate"
  PublicationDate: OrderBy
  "Order by options for Status"
  Status: OrderBy
  "Order by options for CreationDate"
  CreationDate: OrderBy
  "Order by options for TwitchChannel"
  TwitchChannel: OrderBy
  "Order by options for ScheduleDate"
  ScheduleDate: OrderBy
  "Order by options for StartingTime"
  StartingTime: OrderBy
  "Order by options for EndingTime"
  EndingTime: OrderBy
  "Order by options for HostingChannelUrl"
  HostingChannelUrl: OrderBy
  "Order by options for YouTubeVideoUrl"
  YouTubeVideoUrl: OrderBy
  "Conditions to be treated as AND operations"
  and: [StreamingOrderByInput]
  "Conditions to be treated as OR operations"
  or: [StreamingOrderByInput]
}

"Input type for adding Uuid filters"
input UuidFilterInput {
  "Equals"
  eq: UUID
  "Contains"
  contains: UUID
  "Not Contains"
  notContains: UUID
  "Starts With"
  startsWith: UUID
  "Ends With"
  endsWith: UUID
  "Not Equals"
  neq: UUID
  "Case Insensitive"
  caseInsensitive: Boolean = false
  "Is null test"
  isNull: Boolean
}

"Input type for adding String filters"
input StringFilterInput {
  "Equals"
  eq: String
  "Contains"
  contains: String
  "Not Contains"
  notContains: String
  "Starts With"
  startsWith: String
  "Ends With"
  endsWith: String
  "Not Equals"
  neq: String
  "Case Insensitive"
  caseInsensitive: Boolean = false
  "Is null test"
  isNull: Boolean
}

"Input type for adding DateTime filters"
input DateTimeFilterInput {
  "Equals"
  eq: DateTime
  "Greater Than"
  gt: DateTime
  "Greater Than or Equal To"
  gte: DateTime
  "Less Than"
  lt: DateTime
  "Less Than or Equal To"
  lte: DateTime
  "Not Equals"
  neq: DateTime
  "Not null test"
  isNull: Boolean
}

"Input type for adding LocalTime filters"
input LocalTimeFilterInput {
  "Equals"
  eq: LocalTime
  "Greater Than"
  gt: LocalTime
  "Greater Than or Equal To"
  gte: LocalTime
  "Less Than"
  lt: LocalTime
  "Less Than or Equal To"
  lte: LocalTime
  "Not Equals"
  neq: LocalTime
  "Is null test"
  isNull: Boolean
}

"Filter input for Streaming GraphQL type"
input StreamingFilterInput {
  "Filter options for Id"
  Id: UuidFilterInput
  "Filter options for UserId"
  UserId: StringFilterInput
  "Filter options for Title"
  Title: StringFilterInput
  "Filter options for Slug"
  Slug: StringFilterInput
  "Filter options for Abstract"
  Abstract: StringFilterInput
  "Filter options for Seo_Title"
  Seo_Title: StringFilterInput
  "Filter options for Seo_Description"
  Seo_Description: StringFilterInput
  "Filter options for Seo_Keywords"
  Seo_Keywords: StringFilterInput
  "Filter options for PublicationDate"
  PublicationDate: DateTimeFilterInput
  "Filter options for Status"
  Status: StringFilterInput
  "Filter options for CreationDate"
  CreationDate: DateTimeFilterInput
  "Filter options for TwitchChannel"
  TwitchChannel: StringFilterInput
  "Filter options for ScheduleDate"
  ScheduleDate: DateTimeFilterInput
  "Filter options for StartingTime"
  StartingTime: LocalTimeFilterInput
  "Filter options for EndingTime"
  EndingTime: LocalTimeFilterInput
  "Filter options for HostingChannelUrl"
  HostingChannelUrl: StringFilterInput
  "Filter options for YouTubeVideoUrl"
  YouTubeVideoUrl: StringFilterInput
  "Conditions to be treated as AND operations"
  and: [StreamingFilterInput]
  "Conditions to be treated as OR operations"
  or: [StreamingFilterInput]
}

type Query {
  "Get a list of all the Streaming items from the database"
  streamings("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: StreamingFilterInput "Ordering options for query" orderBy: StreamingOrderByInput): StreamingConnection!
  "Get a Streaming from the database by its ID\/primary key"
  streaming_by_pk(Id: UUID!): Streaming
}

"The return object from a filter query that supports a pagination token for paging through results"
type StreamingConnection {
  "The list of items that matched the filter"
  items: [Streaming!]!
  "A pagination token to provide to subsequent pages of a query"
  endCursor: String
  "Indicates if there are more pages of items to return"
  hasNextPage: Boolean!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1."
scalar Short

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"IEEE 754 32 bit float"
scalar Single

"The built-in `Decimal` scalar type."
scalar Decimal

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

scalar ByteArray

"LocalTime is an immutable struct representing a time of day, with no reference to a particular calendar, time zone or date."
scalar LocalTime

scalar UUID

"The `@oneOf` directive is used within the type system definition language\n to indicate:\n\n - an Input Object is a Oneof Input Object, or\n - an Object Type's Field is a Oneof Field."
directive @oneOf on INPUT_OBJECT

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

"A directive to indicate the type maps to a storable entity not a nested entity."
directive @model("Underlying name of the database entity." name: String) on OBJECT | FIELD_DEFINITION

"A directive to indicate the relationship between two tables"
directive @relationship("The name of the GraphQL type the relationship targets" target: String "The relationship cardinality" cardinality: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"A directive to indicate the primary key field of an item."
directive @primaryKey("The underlying database type." databaseType: String) on FIELD_DEFINITION

"When present on a field in a database table, indicates that the field is a referencing field to some field in the same\/another database table."
directive @dab_referencingField on FIELD_DEFINITION

"The default value to be used when creating an item."
directive @defaultValue(value: DefaultValue) on FIELD_DEFINITION

"Indicates that a field is auto generated by the database."
directive @autoGenerated on FIELD_DEFINITION